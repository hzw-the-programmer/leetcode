use super::LinkedList;

/////////////////////////////////////////////////////////////////////////
// Extend
/////////////////////////////////////////////////////////////////////////
impl<T> Extend<T> for LinkedList<T> {
    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        iter.into_iter().for_each(|elem| self.push_back(elem));
    }
}

/////////////////////////////////////////////////////////////////////////
// Clone
/////////////////////////////////////////////////////////////////////////
impl<T: Clone + Default> Clone for LinkedList<T> {
    fn clone(&self) -> Self {
        let mut list = Self::new();
        list.extend(self.iter().cloned());
        list
    }
}

/////////////////////////////////////////////////////////////////////////
// FromIterator
/////////////////////////////////////////////////////////////////////////
impl<T: Default> FromIterator<T> for LinkedList<T> {
    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {
        let mut list = Self::new();
        list.extend(iter.into_iter());
        list
    }
}

/////////////////////////////////////////////////////////////////////////
// From
/////////////////////////////////////////////////////////////////////////
impl<T: Default, const N: usize> From<[T; N]> for LinkedList<T> {
    fn from(arr: [T; N]) -> Self {
        Self::from_iter(arr)
    }
}
